{"version":3,"sources":["Components/GameOver.js","Components/CardElement.js","Components/GameBoard.js","Components/game/game.js","Components/MemoryGame.js","reportWebVitals.js","index.js"],"names":["GameOver","props","show","class","id","className","onClick","restart","CardElement","handleFlip","card","flipped","matched","src","icon","alt","GameBoard","cards","map","index","game","lockMode","firstCard","secondCard","techs","setCard","this","filter","checkMatch","clearCards","unflipCards","checkGameOver","length","createCardsFromTechs","forEach","tech","push","createPairFromTech","flatMap","pair","shuffleCards","createIdWithTech","parseInt","Math","random","currentIndex","randomIndex","floor","flipCard","cardId","gameOverCallBack","noMatchCallBack","setTimeout","MemoryGame","useState","gameOver","setGameOver","setCards","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3a2ba1dc.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function GameOver(props){\r\n    return (\r\n        props.show?\r\n\r\n        <div>\r\n            <div class=\"fadeInAnimation\" id=\"gameOver\" >\r\n        <div className=\"gameOverLetters\">\r\n            Victory!\r\n        </div>\r\n        <button id=\"restart\" onClick={props.restart}>Play Again</button>\r\n    </div>\r\n\r\n        </div>\r\n\r\n        :\r\n        \r\n        <span></span>\r\n    )\r\n}","import React from 'react'\r\n\r\nexport default function CardElement(props) {\r\n    return (\r\n        <div onClick={()=>{props.handleFlip(props.card)}} id={props.card.id} className={`card ${props.card.flipped?\"flip\":\"\"}`}>\r\n            <div className={` ${props.card.matched?\"matched\":\"card_front\"}`}>\r\n                <img className=\"icon\"\r\n                    src={`assets/images/${props.card.icon}.png`}\r\n                    alt={props.card.icon} />\r\n            </div>\r\n            <div className={`${props.card.matched?\"\":\"card_back\"}`}>\r\n             {`${props.card.matched?\"\":\"</>\"}`}\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport CardElement from './CardElement'\r\n\r\nexport default function GameBoard(props){\r\n    return(\r\n        <div id='gameBoard'>\r\n            {props.cards.map((card, index)=>\r\n            <CardElement handleFlip={props.handleFlip} key={index} card={card}/>\r\n            )}\r\n        </div>\r\n    )\r\n}","let game = {\n\n    lockMode: false,\n    firstCard: null,\n    secondCard: null,\n\n    techs: ['bootstrap',\n        'css',\n        'electron',\n        'firebase',\n        'html',\n        'javascript',\n        'jquery',\n        'mongo',\n        'node',\n        'react'],\n\n    cards: null,\n\n    setCard: function (id) {\n\n        let card = this.cards.filter(card => card.id === id)[0];\n        if (card.flipped || this.lockMode) {\n            return false;\n        }\n\n        if (!this.firstCard) {\n            this.firstCard = card;\n            this.firstCard.flipped = true;\n            return true;\n        } else {\n            this.secondCard = card;\n            this.secondCard.flipped = true;\n            this.lockMode = true;\n            return true;\n        }\n\n    }   ,\n\n    checkMatch: function () {\n        //no Match\n        if (!this.firstCard || !this.secondCard) {\n            return false;\n        }\n        //Match\n        return this.firstCard.icon === this.secondCard.icon;\n    },\n\n    clearCards: function () {\n        this.firstCard = null;\n        this.secondCard = null;\n        this.lockMode = false;\n    },\n    unflipCards() {\n        this.firstCard.flipped = false;\n        this.secondCard.flipped = false;\n        this.clearCards();\n    },\n\n    checkGameOver() {\n\n        return this.cards.filter(card => !card.flipped).length === 0;\n    },\n\n\n    createCardsFromTechs: function () {\n\n        this.cards = [];\n\n        this.techs.forEach((tech) => {\n            this.cards.push(this.createPairFromTech(tech));\n        })\n        this.cards = this.cards.flatMap(pair => pair);\n        this.shuffleCards();\n        return this.cards;\n    },\n\n    createPairFromTech: function (tech) {\n\n        return [{\n            id: this.createIdWithTech(tech),\n            icon: tech,\n            flipped: false,\n            matched: false\n        }, {\n            id: this.createIdWithTech(tech),\n            icon: tech,\n            flipped: false,\n            matched: false\n        }]\n\n    },\n\n    createIdWithTech: function (tech) {\n        return tech + parseInt(Math.random() * 1000);\n    },\n\n    shuffleCards: function (cards) {\n        let currentIndex = this.cards.length;\n        let randomIndex = 0;\n\n        while (currentIndex !== 0) {\n\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex--;\n\n            [this.cards[randomIndex], this.cards[currentIndex]] = [this.cards[currentIndex], this.cards[randomIndex]]\n        }\n\n    },\n\n    flipCard: function(cardId, gameOverCallBack, noMatchCallBack){\n        if (this.setCard(cardId)) {\n\n            if (this.secondCard) {\n                if (this.checkMatch()) {\n                    //if Matched\n                    this.firstCard.matched = true;\n                    this.secondCard.matched = true;            \n                    this.clearCards();\n                    if (this.checkGameOver()) {\n                        //gameOver\n                        gameOverCallBack()\n                      }\n                } else {\n                    //No Match \n                    setTimeout(() => {\n                        this.unflipCards();\n                        noMatchCallBack();\n                    }, 1000);\n    \n                };\n            }\n        }\n    }\n\n}\n\nexport default game","import React, { useEffect, useState } from 'react'\r\nimport GameOver from './GameOver'\r\nimport GameBoard from './GameBoard';\r\nimport game from './game/game'\r\n\r\nconst MemoryGame = () => {\r\n\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [cards, setCards] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setCards(game.createCardsFromTechs())\r\n    }, [])\r\n\r\n    function restart() {\r\n        game.clearCards()\r\n        setCards(game.createCardsFromTechs())\r\n        setGameOver(false)\r\n    }\r\n\r\n    function handleFlip(card) {\r\n\r\n        game.flipCard(card.id,\r\n            // GameOver CallBack\r\n            () => { setGameOver(true) },\r\n            // NoMatch Callback\r\n            () => {\r\n                setCards([...game.cards])\r\n            })\r\n        setCards([...game.cards])\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <GameBoard handleFlip={handleFlip} cards={cards} />\r\n            <GameOver show={gameOver} restart={restart} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MemoryGame","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport MemoryGame from './Components/MemoryGame'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MemoryGame></MemoryGame>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}